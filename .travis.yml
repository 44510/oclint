language: cpp

matrix:
  include:
    - os: linux
      dist: bionic
      sudo: required
      env: BUILD="test" MODULE="core"
    - os: linux
      dist: bionic
      sudo: required
      env: BUILD="test" MODULE="metrics"
    - os: linux
      dist: bionic
      sudo: required
      env: BUILD="test" MODULE="rules" DEP="core metrics"
    - os: linux
      dist: bionic
      sudo: required
      env: BUILD="test" MODULE="reporters" DEP="core"
    - os: linux
      dist: bionic
      sudo: required
      env: BUILD="test" MODULE="driver" DEP="core"
    - os: linux
      dist: bionic
      sudo: required
      env: BUILD="build"
    - os: linux
      dist: bionic
      sudo: required
      env: BUILD="docgen"
    - os: osx
      osx_image: xcode11.5
      env: BUILD="test" MODULE="core"
    - os: osx
      osx_image: xcode11.5
      env: BUILD="test" MODULE="metrics"
    - os: osx
      osx_image: xcode11.5
      env: BUILD="test" MODULE="rules" DEP="core metrics"
    - os: osx
      osx_image: xcode11.5
      env: BUILD="test" MODULE="reporters" DEP="core"
    - os: osx
      osx_image: xcode11.5
      env: BUILD="test" MODULE="driver" DEP="core"
    - os: osx
      osx_image: xcode11.5
      env: BUILD="build"
    - os: osx
      osx_image: xcode11.5
      env: BUILD="docgen"

before_install:
- if [ "$TRAVIS_OS_NAME" == "linux" ]; then
    sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y;
    sudo apt-get update -q;
    sudo apt-get install gcc-7 g++-7 -y --allow-unauthenticated;
    sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 50;
    sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 50;
    CMAKE_VERSION=3.17.3;
    CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.*}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz";
    echo CMAKE_URL=${CMAKE_URL};
    mkdir cmake-${CMAKE_VERSION} && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake-${CMAKE_VERSION};
    export PATH=${PWD}/cmake-${CMAKE_VERSION}/bin:${PATH};
  fi
- if [ "$TRAVIS_OS_NAME" == "osx" ]; then
    HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv;
    eval "$(pyenv init -)";
    pyenv install 3.8.2;
    pyenv global 3.8.2;
    pyenv rehash;
    pip install cpp-coveralls;
    pyenv rehash;
  else
    sudo pip install --upgrade cpp-coveralls;
  fi
- if [ "$TRAVIS_OS_NAME" == "osx" ]; then
    HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja;
  else
    sudo apt-get install ninja-build -y;
  fi

script:
  - cd oclint-scripts
  - ./travis $BUILD $MODULE $DEP
  - cd ..

after_success:
  - if [ $BUILD == test ] && [ $MODULE != driver ]; then
      if [ $TRAVIS_OS_NAME == osx ]; then
        coveralls --gcov $PWD/build/llvm-install/bin/llvm-cov --gcov-options gcov --include oclint-${MODULE}/ --exclude oclint-${MODULE}/test;
      else
        coveralls --include oclint-${MODULE}/ --exclude oclint-${MODULE}/test;
      fi
    fi

addons:
  artifacts:
    paths:
      - $(ls build/oclint-*.tar.gz)
