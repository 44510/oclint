language: cpp

matrix:
  include:
    - os: linux
      dist: focal
      sudo: required
      env: BUILD="test" MODULE="core"
    - os: linux
      dist: focal
      sudo: required
      env: BUILD="test" MODULE="metrics"
    - os: linux
      dist: focal
      sudo: required
      env: BUILD="test" MODULE="rules" DEP="core metrics"
    - os: linux
      dist: focal
      sudo: required
      env: BUILD="test" MODULE="reporters" DEP="core"
    - os: linux
      dist: focal
      sudo: required
      env: BUILD="test" MODULE="driver" DEP="core"
    - os: linux
      dist: focal
      sudo: required
      env: BUILD="build"
    - os: linux
      dist: focal
      sudo: required
      env: BUILD="docgen"
    - os: linux
      arch: arm64
      dist: focal
      sudo: required
      env: BUILD="test" MODULE="core"
    - os: linux
      arch: arm64
      dist: focal
      sudo: required
      env: BUILD="test" MODULE="metrics"
    # - os: linux
    #   arch: arm64
    #   dist: focal
    #   sudo: required
    #   env: BUILD="test" MODULE="rules" DEP="core metrics"
    - os: linux
      arch: arm64
      dist: focal
      sudo: required
      env: BUILD="test" MODULE="reporters" DEP="core"
    - os: linux
      arch: arm64
      dist: focal
      sudo: required
      env: BUILD="test" MODULE="driver" DEP="core"
    # - os: linux
    #   arch: arm64
    #   dist: focal
    #   sudo: required
    #   env: BUILD="build"
    - os: osx
      osx_image: xcode12.2
      env: BUILD="test" MODULE="core"
    - os: osx
      osx_image: xcode12.2
      env: BUILD="test" MODULE="metrics"
    - os: osx
      osx_image: xcode12.2
      env: BUILD="test" MODULE="rules" DEP="core metrics"
    - os: osx
      osx_image: xcode12.2
      env: BUILD="test" MODULE="reporters" DEP="core"
    - os: osx
      osx_image: xcode12.2
      env: BUILD="test" MODULE="driver" DEP="core"
    - os: osx
      osx_image: xcode12.2
      env: BUILD="build"
    - os: osx
      osx_image: xcode12.2
      env: BUILD="docgen"

before_install:
- if [ "$TRAVIS_OS_NAME" == "osx" ]; then
    HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv;
    eval "$(pyenv init -)";
    pyenv install 3.8.2;
    pyenv global 3.8.2;
    pyenv rehash;
    pip install cpp-coveralls;
    pyenv rehash;
  else
    sudo pip install --upgrade cpp-coveralls;
  fi
- if [ "$TRAVIS_OS_NAME" == "osx" ]; then
    HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja;
  else
    sudo apt-get install ninja-build -y;
  fi

script:
  - cd oclint-scripts
  - ./travis $BUILD $MODULE $DEP
  - cd ..

after_success:
  - if [ $BUILD == test ] && [ $MODULE != driver ]; then
      if [ $TRAVIS_OS_NAME == osx ]; then
        coveralls --gcov $PWD/build/llvm-install/bin/llvm-cov --gcov-options gcov --include oclint-${MODULE}/ --exclude oclint-${MODULE}/test;
      else
        coveralls --include oclint-${MODULE}/ --exclude oclint-${MODULE}/test;
      fi
    fi

addons:
  artifacts:
    paths:
      - $(ls build/oclint-*.tar.gz)
